C51 COMPILER V9.54   MAIN                                                                  04/12/2025 00:29:00 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* 头文件声明区 */
   2          #include <STC15F2K60S2.H>//单片机寄存器专用头文件
   3          #include <Init.h>//初始化底层驱动专用头文件
   4          #include <Led.h>//Led底层驱动专用头文件
   5          #include <Key.h>//按键底层驱动专用头文件
   6          #include <Seg.h>//数码管底层驱动专用头文件
   7          #include <Uart.h>//串口底层驱动专用头文件
   8          #include <string.h>
   9          #include <iic.h>
  10          #include <ds1302.h>
  11          #include <onewire.h>
  12          #include <ultrasound.h>
  13          /* 变量声明区 */
  14          unsigned char Key_Val,Key_Down,Key_Old,Key_Up;//按键专用变量
  15          unsigned char Key_Slow_Down;//按键减速专用变量
  16          
  17          unsigned char Seg_Buf[8] = {17,17,17,17,17,17,17,17};//数码管显示数据存放数组
  18          unsigned char Seg_Pos;//数码管扫描专用变量
  19          idata unsigned int Seg_Slow_Down;//数码管减速专用变量
  20          
  21          idata unsigned char ucLed[8] = {0,0,0,0,0,0,0,0};//Led显示数据存放数组
  22          idata unsigned char ucRtc[3] = {11,12,13};
  23          
  24          /* 串口数据 */
  25          idata unsigned char Uart_Recv[10];//串口接收数据储存数组 默认10个字节 若接收数据较长
             - 可更改最大字节数
  26          idata unsigned char Uart_Recv_Index;//串口接收数组指针
  27          idata unsigned char Uart_Recv_Tick;     // 串口接收时间标志
  28          idata unsigned char Uart_Rx_Flag;
  29          
  30          /* NE555数据处理 */
  31          idata unsigned int Time_1s;
  32          idata unsigned int Freq;
  33          
  34          unsigned char Seg_Disp_Mode;  //0 温度显示 1 参数设置 2 DAC
  35          unsigned char DAC_Mode=0;
  36          float T;
  37          unsigned int temp_disp;
  38          unsigned char temp_set=25;
  39          unsigned char temp_DAC_set=25;
  40          float DAC_Set;
  41          unsigned int DAC_Disp;
  42          idata unsigned int DAC_Slow_Down;
  43          
  44          /* 键盘处理函数 */
  45          void Key_Proc()
  46          {
  47   1          if(Key_Slow_Down<10) return;
  48   1          Key_Slow_Down = 0;//键盘减速程序
  49   1      
  50   1          Key_Val = Key_Read();//实时读取键码值
  51   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);//捕捉按键下降沿
  52   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);//捕捉按键上降沿
  53   1          Key_Old = Key_Val;//辅助扫描变量
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 00:29:00 PAGE 2   

  54   1      
  55   1          switch(Key_Down){
  56   2          case 4:
  57   2            if(++Seg_Disp_Mode==3) Seg_Disp_Mode=0;
  58   2            if(Seg_Disp_Mode==2) temp_DAC_set=temp_set;
  59   2            break;
  60   2          case 8:
  61   2            if(Seg_Disp_Mode==1) {
  62   3              // temp_set--;
  63   3              if(--temp_set==255) temp_set=0;
  64   3      
  65   3            }
  66   2            break;
  67   2          case 9:
  68   2            if(Seg_Disp_Mode==1) {
  69   3              // if(++temp_set==100) temp_set=99;
  70   3              if(++temp_set==0) temp_set=255;
  71   3            }
  72   2            break;
  73   2          case 5:
  74   2            if(++DAC_Mode==2) DAC_Mode=0;
  75   2            break;
  76   2          
  77   2        }
  78   1      
  79   1      }
  80          
  81          /* 信息处理函数 */
  82          void Seg_Proc()
  83          {
  84   1          if(Seg_Slow_Down<500) return;
  85   1          Seg_Slow_Down = 0;//数码管减速程序
  86   1      
  87   1          T=rd_temperature();
  88   1        // T=15.0;
  89   1        temp_disp = T * 100;
  90   1        //
  91   1        if(Seg_Disp_Mode==0){
  92   2          Seg_Buf[0]=12;
  93   2          Seg_Buf[4]=temp_disp/1000%10;
  94   2          Seg_Buf[5]=temp_disp/100%10 + ',';
  95   2          Seg_Buf[6]=temp_disp/10%10;
  96   2          Seg_Buf[7]=temp_disp%10;
  97   2        }
  98   1        if(Seg_Disp_Mode==1){
  99   2          Seg_Buf[0]=18;
 100   2          Seg_Buf[4]=17;
 101   2          Seg_Buf[5]=17;
 102   2          Seg_Buf[6]=temp_set/10%10;
 103   2          Seg_Buf[7]=temp_set%10;
 104   2        }
 105   1        if(Seg_Disp_Mode==2){
 106   2          Seg_Buf[0]=10;
 107   2          Seg_Buf[4]=17;
 108   2          Seg_Buf[5]=DAC_Disp/100%10 + ',';
 109   2          Seg_Buf[6]=DAC_Disp/10%10;
 110   2          Seg_Buf[7]=DAC_Disp%10;
 111   2        }
 112   1      
 113   1      
 114   1      }
 115          
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 00:29:00 PAGE 3   

 116          void DA_Proc(){
 117   1        if(DAC_Slow_Down < 300) return;
 118   1        DAC_Slow_Down = 0;
 119   1        if(DAC_Mode==0) {
 120   2          if(T<temp_DAC_set) DAC_Set=0;
 121   2          else DAC_Set=255;  
 122   2        }
 123   1        if(DAC_Mode==1) {
 124   2          if(T<=20) DAC_Set=51;
 125   2          else if(T<=40) DAC_Set=7.65*T-102;
 126   2          else if(T>40) DAC_Set=204;
 127   2        }
 128   1        DAC_Disp = DAC_Set*100/51.0;
 129   1        Da_Write(DAC_Set);
 130   1      }
 131          
 132          
 133          /* 其他显示函数 */
 134          void Led_Proc()
 135          {
 136   1          ucLed[0]=(DAC_Mode==0); 
 137   1        ucLed[1]=(Seg_Disp_Mode==0);
 138   1        ucLed[2]=(Seg_Disp_Mode==1);
 139   1        ucLed[3]=(Seg_Disp_Mode==2);
 140   1      }
 141          
 142          // /* 串口处理函数 */
 143          // void Uart_Proc()
 144          // {
 145          //     if (Uart_Recv_Index == 0) return; // 无数据，直接返回
 146          //     if (Uart_Recv_Tick >= 10)
 147          //     { // 若接收超时，对数据读取，清空缓存区
 148          //         Uart_Rx_Flag = 0;
 149          //         Uart_Recv_Tick = 0;
 150          
 151          //         memset(Uart_Recv, 0, Uart_Recv_Index); // 清空接收数据
 152          //         Uart_Recv_Index = 0;
 153          //     }
 154          // }
 155          
 156          // /* 定时器0中断初始化函数 */
 157          // void Timer0Init(void)    //1微秒@12.000MHz
 158          // {
 159          //  AUXR &= 0x7F;   //定时器时钟12T模式
 160          //  TMOD &= 0xF0;   //设置定时器模式
 161          //  TMOD |= 0x05;   //设置定时器模式
 162          //  TL0 = 0;    //设置定时初值
 163          //  TH0 = 0;    //设置定时初值
 164          //  TF0 = 0;    //清除TF0标志
 165          //  TR0 = 1;    //定时器0开始计时
 166          // }
 167          
 168          
 169          void Timer1Init(void)   //1毫秒@12.000MHz
 170          {
 171   1        AUXR &= 0xBF;   //定时器时钟12T模式
 172   1        TMOD &= 0x0F;   //设置定时器模式
 173   1        TL1 = 0x18;   //设置定时初值
 174   1        TH1 = 0xFC;   //设置定时初值
 175   1        TF1 = 0;    //清除TF1标志
 176   1        TR1 = 1;    //定时器1开始计时
 177   1          ET1 = 1;
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 00:29:00 PAGE 4   

 178   1          EA = 1;
 179   1      }
 180          
 181          /* 定时器0中断服务函数 */
 182          void Timer1Server() interrupt 3
 183          {  
 184   1          Key_Slow_Down ++;
 185   1          Seg_Slow_Down ++;
 186   1        DAC_Slow_Down ++;
 187   1      
 188   1          if(++Seg_Pos == 8) Seg_Pos = 0;//数码管显示专用
 189   1           // 数码管显示处理
 190   1          if (Seg_Buf[Seg_Pos] > 20)
 191   1              Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos] - ',', 1); // 带小数点
 192   1          else
 193   1              Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], 0); // 无小数点
 194   1          
 195   1          Led_Disp(ucLed); 
 196   1      
 197   1          // if (++Time_1s == 1000){
 198   1        //  Time_1s = 0;
 199   1        //  Freq = TH0 << 8 | TL0;
 200   1        //  TH0 = 0;
 201   1        //  TL0 = 0;
 202   1        // }
 203   1          
 204   1          // if(Uart_Rx_Flag == 1)
 205   1          //     Uart_Recv_Tick ++;
 206   1      }
 207          
 208          // /* 串口1中断服务函数 */
 209          // void Uart1Server() interrupt 4
 210          // {
 211          //     if(RI == 1) //串口接收数据
 212          //     {
 213          //         Uart_Rx_Flag = 1;
 214          //         Uart_Recv_Tick = 0;
 215          //         Uart_Recv[Uart_Recv_Index] = SBUF;
 216          //         Uart_Recv_Index++;
 217          //         RI = 0;
 218          //         if(Uart_Recv_Index>10)
 219          //         {
 220          //             Uart_Recv_Index = 0;
 221          //             memset(Uart_Recv,0,10);
 222          //         }
 223          //     }
 224          // }
 225          
 226          /* Main */
 227          void main()
 228          {
 229   1          System_Init();
 230   1          // Uart_Init();
 231   1          Timer1Init();
 232   1          Set_Rtc(ucRtc);
 233   1          while (1)
 234   1          {
 235   2              Key_Proc();
 236   2              Seg_Proc();
 237   2              Led_Proc();
 238   2              DA_Proc();
 239   2      
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 00:29:00 PAGE 5   

 240   2              // Uart_Proc();
 241   2          }
 242   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    849    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30    ----
   IDATA SIZE       =     32    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
