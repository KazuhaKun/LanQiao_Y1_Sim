C51 COMPILER V9.54   MAIN                                                                  04/12/2025 20:57:04 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include <stdio.h>
   3          #include <string.h>
   4          #include "ds1302.h"
   5          #include "iic.h"
   6          #include "init.h"
   7          #include "key.h"
   8          #include "led.h"
   9          #include "onewire.h"
  10          #include "seg.h"
  11          #include "uart.h"
  12          #include "ultrawave.h"
  13          
  14          unsigned char Key_Val,Key_Down,Key_Up,Key_Old;
  15          unsigned char Key_Slow_Down;
  16          
  17          idata unsigned char Seg_Buf[8] = {17,17,17,17,17,17,17,17};//数码管显示数据存放数组
  18          idata unsigned char Seg_Pos;
  19          idata unsigned int Seg_Slow_Down;
  20          
  21          idata unsigned char ucLed[8]={0,0,0,0,0,0,0,0};
  22          
  23          idata unsigned char ucRtc[3]={11,12,13};
  24          
  25          idata unsigned char Uart_Recv[10];
  26          idata unsigned char Uart_Recv_Index;
  27          idata unsigned char Uart_Recv_Tick;
  28          idata unsigned char Uart_Rx_Flag;
  29          
  30          idata unsigned int Time_1s;
  31          idata unsigned int Freq;
  32          
  33          // idata unsigned char KeyN_Last;
  34          // idata unsigned char KeyN_Slow_Down;
  35          
  36          unsigned char Seg_Disp_Mode;  //0 温度显示 1 参数设置 2 DAC
  37          unsigned char DAC_Mode=0;
  38          float T;
  39          unsigned int temp_disp;
  40          unsigned char temp_set=25;
  41          unsigned char temp_DAC_set=25;
  42          float DAC_Set;
  43          unsigned int DAC_Disp;
  44          idata unsigned int DAC_Slow_Down;
  45          
  46          
  47          
  48          void Key_Proc(){
  49   1          if(Key_Slow_Down < 10) return;
  50   1          Key_Slow_Down=0;
  51   1      
  52   1          Key_Val=Key_Read();
  53   1          Key_Down=Key_Val&(Key_Old^Key_Val);
  54   1          Key_Up=~Key_Val&(Key_Old^Key_Val);
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 20:57:04 PAGE 2   

  55   1          Key_Old=Key_Val;
  56   1      
  57   1          switch(Key_Down){
  58   2          case 4:
  59   2            if(++Seg_Disp_Mode==3) Seg_Disp_Mode=0;
  60   2            if(Seg_Disp_Mode==2) temp_DAC_set=temp_set;
  61   2            break;
  62   2          case 8:
  63   2            if(Seg_Disp_Mode==1) {
  64   3              // temp_set--;
  65   3              if(--temp_set==255) temp_set=0;
  66   3      
  67   3            }
  68   2            break;
  69   2          case 9:
  70   2            if(Seg_Disp_Mode==1) {
  71   3              // if(++temp_set==100) temp_set=99;
  72   3              if(++temp_set==0) temp_set=255;
  73   3            }
  74   2            break;
  75   2          case 5:
  76   2            if(++DAC_Mode==2) DAC_Mode=0;
  77   2            break;
  78   2          
  79   2        }
  80   1      }
  81          
  82          void Seg_Proc(){
  83   1          if(Seg_Slow_Down<500) return;
  84   1          Seg_Slow_Down=0;
  85   1      
  86   1          T=rd_temperature();
  87   1        // T=15.0;
  88   1        temp_disp = T * 100;
  89   1        //
  90   1        if(Seg_Disp_Mode==0){
  91   2          Seg_Buf[0]=12;
  92   2          Seg_Buf[4]=temp_disp/1000%10;
  93   2          Seg_Buf[5]=temp_disp/100%10 + ',';
  94   2          Seg_Buf[6]=temp_disp/10%10;
  95   2          Seg_Buf[7]=temp_disp%10;
  96   2        }
  97   1        if(Seg_Disp_Mode==1){
  98   2          Seg_Buf[0]=18;
  99   2          Seg_Buf[4]=17;
 100   2          Seg_Buf[5]=17;
 101   2          Seg_Buf[6]=temp_set/10%10;
 102   2          Seg_Buf[7]=temp_set%10;
 103   2        }
 104   1        if(Seg_Disp_Mode==2){
 105   2          Seg_Buf[0]=10;
 106   2          Seg_Buf[4]=17;
 107   2          Seg_Buf[5]=DAC_Disp/100%10 + ',';
 108   2          Seg_Buf[6]=DAC_Disp/10%10;
 109   2          Seg_Buf[7]=DAC_Disp%10;
 110   2        }
 111   1      
 112   1      
 113   1      
 114   1      
 115   1      }
 116          
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 20:57:04 PAGE 3   

 117          void DA_Proc(){
 118   1        // if(DAC_Slow_Down < 300) return;
 119   1        // DAC_Slow_Down = 0;
 120   1        if(DAC_Mode==0) {
 121   2          if(T<temp_DAC_set) DAC_Set=0;
 122   2          else DAC_Set=255;  
 123   2        }
 124   1        if(DAC_Mode==1) {
 125   2          if(T<=20) DAC_Set=51;
 126   2          else if(T<=40) DAC_Set=7.65*T-102;
 127   2          else if(T>40) DAC_Set=204;
 128   2        }
 129   1        DAC_Disp = DAC_Set*100/51.0;
 130   1        Da_Write(DAC_Set);
 131   1      }
 132          
 133          void Led_Proc(){
 134   1          ucLed[0]=(DAC_Mode==0); 
 135   1        ucLed[1]=(Seg_Disp_Mode==0);
 136   1        ucLed[2]=(Seg_Disp_Mode==1);
 137   1        ucLed[3]=(Seg_Disp_Mode==2);
 138   1      
 139   1      }
 140          
 141          // void Uart_Proc(){
 142          //     if(Uart_Recv_Index == 0) return;
 143          //     if(Uart_Recv_Tick >= 10){
 144          //         Uart_Rx_Flag=0;
 145          //         Uart_Recv_Tick=0;
 146          
 147          //         memset(Uart_Recv,0,Uart_Recv_Index);
 148          //         Uart_Recv_Index=0;
 149          //     }
 150          // }
 151          
 152          // void Timer0Init(void)    //1微秒@12.000MHz
 153          // {
 154          //  AUXR &= 0x7F;   //定时器时钟12T模式
 155          //  TMOD &= 0xF0;   //设置定时器模式
 156          //  TMOD |= 0x05;   //设置定时器模式
 157          //  TL0 = 0;    //设置定时初值
 158          //  TH0 = 0;    //设置定时初值
 159          //  TF0 = 0;    //清除TF0标志
 160          //  TR0 = 1;    //定时器0开始计时
 161          // }
 162          
 163          void Timer1Init(void)   //1毫秒@12.000MHz
 164          {
 165   1        AUXR &= 0xBF;   //定时器时钟12T模式
 166   1        TMOD &= 0x0F;   //设置定时器模式
 167   1        TL1 = 0x18;   //设置定时初值
 168   1        TH1 = 0xFC;   //设置定时初值
 169   1        TF1 = 0;    //清除TF1标志
 170   1        TR1 = 1;    //定时器1开始计时
 171   1          ET1 = 1;
 172   1          EA = 1;
 173   1      }
 174          
 175          void Timer1Isr() interrupt 3
 176          {
 177   1          Key_Slow_Down++;
 178   1          Seg_Slow_Down++;
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 20:57:04 PAGE 4   

 179   1      
 180   1          if(++Seg_Pos==8) Seg_Pos=0;
 181   1      
 182   1          if(Seg_Buf[Seg_Pos]>20) Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos]-',',1);
 183   1          else Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos],0);
 184   1      
 185   1          Led_Disp(ucLed);
 186   1      
 187   1          // if(++Time_1s==1000){
 188   1          //     Time_1s=0;
 189   1          //     Freq = TH0<<8|TL0;
 190   1          //     TH0 = 0;
 191   1          //     TL0 = 0;
 192   1          // }
 193   1      
 194   1          // if(Uart_Rx_Flag==1){
 195   1          //     Uart_Recv_Tick++;
 196   1          // }
 197   1      
 198   1          // if(KeyN_Last&&++KeyN_Slow_Down>=30){
 199   1          //     KeyN_Last=0;
 200   1          //     KeyN_Slow_Down=0;
 201   1          // }
 202   1      }
 203          
 204          // void Uart1Isr() interrupt 4
 205          // {
 206          //     if(RI==1){
 207          //         Uart_Rx_Flag=1;
 208          //         Uart_Recv_Tick=0;
 209          //         Uart_Recv[Uart_Recv_Index]=SBUF;
 210          //         Uart_Recv_Index++;
 211          //         RI=0;
 212          //         if(Uart_Recv_Index>10){
 213          //             Uart_Recv_Index=0;
 214          //             memset(Uart_Recv,0,10);
 215          //         }
 216          //     }
 217          // }
 218          
 219          void main(){
 220   1          InitSys();
 221   1          // UartInit();
 222   1          Timer1Init();
 223   1        Set_Rtc(ucRtc);
 224   1          while(1){
 225   2              Key_Proc();
 226   2              Led_Proc();
 227   2              Seg_Proc();
 228   2          DA_Proc();
 229   2      
 230   2              //Uart_Proc();
 231   2          }
 232   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    841    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21    ----
C51 COMPILER V9.54   MAIN                                                                  04/12/2025 20:57:04 PAGE 5   

   IDATA SIZE       =     41    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
