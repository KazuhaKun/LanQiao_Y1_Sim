C51 COMPILER V9.54   MAIN                                                                  03/21/2025 21:35:01 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC15F2K60S2.H> //单片机头文件
   2          #include "iic.h"  //IIC相关代码,直接调用EEPROM和AD/DA(Da_Write;Ad_Read;EEPROM_Read;EEPROM_Write)
   3          #include "ds1302.h"   //直接操作rtc时钟(Read_Rtc;Set_Rtc)
   4          #include "onewire.h"  //直接读出24C20温度(rd_temperature)
   5          #include <string.h>   //memset需要
   6          #include "init.h"
   7          #include "key.h"
   8          #include "led.h"
   9          #include "seg.h"
  10          #include "uart.h"
  11          #include "ultrawave.h"
  12          
  13          void Delay(unsigned int t){
  14   1        while(t--){
  15   2        }
  16   1      }
  17          
  18          //HC138的选择
  19          void SetHC138(unsigned char channel,unsigned char dat){
  20   1        P2 = (P2 & 0x1f) | (channel << 5);
  21   1        P0 = dat;
  22   1      }
  23          
  24          //超多变量
  25          unsigned char Key_Val, Key_Down, Key_Old, Key_Up; //按键相关变量
  26          unsigned char Seg_Buf[8]={17,17,17,17,17,17,17,17};   //数码管对应位置显示值存储数组
  27          unsigned char Seg_Point[8]={0,0,0,0,0,0,0,0};   //数码管对应位置小数点存储数组
  28          unsigned char Seg_Pos;    //数码管刷新位置值
  29          unsigned char ucLed[8]={0,0,0,0,0,0,0,0};   //LED对应位置状态存储数组
  30          unsigned char Uart_Recv[10];  //串口接收存储数组
  31          unsigned char Uart_Recv_Index;  //串口数据索引
  32          unsigned char ucRtc[3] = {8,59,50}; //Rtc时钟数值
  33          unsigned int Slow_Down;   //用于计时中断服务函数
  34          bit Seg_Flag, Key_Flag;   //同上
  35          bit Uart_Flag;        //同上
  36          unsigned int Time_1s;   //同上,主要负责频率的处理
  37          unsigned int Freq;      //频率值
  38          unsigned int Sys_Tick;    //
  39          unsigned char Seg_Disp_Mode=0;
  40          bit Relay_Mode=0;
  41          bit Relay_Flag=0;
  42          unsigned int temp_set=23;
  43          bit time_disp_flag=0;
  44          bit Flash_Flag;
  45          float T;
  46          unsigned int temp_disp;
  47          unsigned int temp_set_disp;
  48          
  49          void Key_Proc(){
  50   1        if(Key_Flag)return;
  51   1        Key_Flag = 1;
  52   1        Key_Val = Key_Read();
  53   1        Key_Down = Key_Val & (Key_Old ^ Key_Val);
  54   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
C51 COMPILER V9.54   MAIN                                                                  03/21/2025 21:35:01 PAGE 2   

  55   1        Key_Old = Key_Val;
  56   1      
  57   1      
  58   1        switch(Key_Down){
  59   2          case 12:
  60   2            if(++Seg_Disp_Mode==3) Seg_Disp_Mode=0;
  61   2            break;
  62   2          case 13:
  63   2            Relay_Mode = !Relay_Mode;
  64   2            break;
  65   2          case 16:
  66   2            if(Seg_Disp_Mode==2) if(++temp_set==99) temp_set=0;
  67   2            break;
  68   2          case 17:
  69   2            if(Seg_Disp_Mode==2) if(--temp_set==0) temp_set=99;
  70   2            if(Seg_Disp_Mode==1) time_disp_flag = 1;
  71   2            break;
  72   2        }
  73   1        switch(Key_Up){
  74   2          case 17:
  75   2            if(Seg_Disp_Mode==1) time_disp_flag = 0;
  76   2            break;
  77   2        }
  78   1        // if(Seg_Disp_Mode==1){
  79   1        //  if(Key_Old==17) time_disp_flag = 1;
  80   1        //  else time_disp_flag = 0;
  81   1        // }
  82   1      }
  83          
  84          void Led_Proc(){
  85   1        if(ucRtc[1]==0 && ucRtc[2]<=5) ucLed[0]=1;
  86   1        else ucLed[0]=0;
  87   1        if(Relay_Mode==0) ucLed[1]=1;
  88   1        else ucLed[1]=0;
  89   1        if(Relay_Flag==1) ucLed[2]=Flash_Flag;
  90   1        else ucLed[2]=0;
  91   1      }
  92          
  93          void Relay_Proc(){
  94   1        if(Relay_Mode==0){
  95   2          if(T>temp_set) Relay_Flag=1;
  96   2          else Relay_Flag=0;
  97   2        }
  98   1        if(Relay_Mode==1){
  99   2          if(ucRtc[1]==0 && ucRtc[2]<=5) Relay_Flag=1;
 100   2          else Relay_Flag=0;
 101   2        }
 102   1      }
 103          void Seg_Proc(){
 104   1        if(Seg_Flag) return;
 105   1        Seg_Flag = 1;
 106   1      
 107   1        T=rd_temperature();
 108   1        temp_disp=T*10;
 109   1        // temp_set_disp=temp_set;
 110   1        
 111   1        if(Seg_Disp_Mode==0){
 112   2          Seg_Buf[0]=18;
 113   2          Seg_Buf[1]=1;
 114   2          Seg_Buf[5]=temp_disp/100%10;
 115   2          Seg_Buf[6]=temp_disp/10%10;
 116   2          Seg_Point[6]=1;
C51 COMPILER V9.54   MAIN                                                                  03/21/2025 21:35:01 PAGE 3   

 117   2          Seg_Buf[7]=temp_disp%10;
 118   2        }
 119   1        if(Seg_Disp_Mode==1){
 120   2          Seg_Buf[0]=18;
 121   2          Seg_Buf[1]=2;
 122   2          if(time_disp_flag==0){
 123   3            Seg_Buf[3]=ucRtc[0]/10%10;
 124   3            Seg_Buf[4]=ucRtc[0]%10;
 125   3            Seg_Buf[5]=16;
 126   3            Seg_Buf[6]=ucRtc[1]/10%10;
 127   3            Seg_Point[6]=0;
 128   3            Seg_Buf[7]=ucRtc[1]%10;
 129   3          }
 130   2          if(time_disp_flag==1){
 131   3            Seg_Buf[3]=ucRtc[1]/10%10;
 132   3            Seg_Buf[4]=ucRtc[1]%10;
 133   3            Seg_Buf[5]=16;
 134   3            Seg_Buf[6]=ucRtc[2]/10%10;
 135   3            Seg_Point[6]=0;
 136   3            Seg_Buf[7]=ucRtc[2]%10;
 137   3          }
 138   2        }
 139   1        if(Seg_Disp_Mode==2){
 140   2          Seg_Buf[0]=18;
 141   2          Seg_Buf[1]=3;
 142   2          Seg_Buf[3]=17;
 143   2          Seg_Buf[4]=17;
 144   2          Seg_Buf[5]=17;
 145   2          Seg_Buf[6]=temp_set/10%10;
 146   2          Seg_Buf[7]=temp_set%10;
 147   2        }
 148   1        
 149   1      }
 150          
 151          // void Timer0_Init(void){
 152          //  AUXR &= 0x7f;
 153          //  TMOD &= 0xf0;
 154          //  TMOD |= 0x05;
 155          //  TL0 = 0;
 156          //  TH0 = 0;
 157          //  TF0 = 0;
 158          //  TR0 = 1;
 159          // }
 160          void Timer1_Init(void){
 161   1        AUXR &= 0xbf;
 162   1        TMOD &= 0x0f;
 163   1        TL1 = (65536-1000)%256;
 164   1        TH1 = (65536-1000)/256;
 165   1        TF1 = 0;
 166   1        TR1 = 1;
 167   1        ET1 = 1;
 168   1        EA = 1;
 169   1      }
 170          
 171          void Timer1_Isr(void) interrupt 3
 172          {
 173   1        if (++Slow_Down == 400){
 174   2          Seg_Flag = Slow_Down =0;
 175   2        }
 176   1        if (Slow_Down % 10 == 0){
 177   2          Key_Flag = 0;
 178   2        }
C51 COMPILER V9.54   MAIN                                                                  03/21/2025 21:35:01 PAGE 4   

 179   1        if (Slow_Down % 10 == 0){
 180   2          Read_Rtc(ucRtc);
 181   2        }
 182   1        if (Uart_Flag) Sys_Tick++;
 183   1        if (++Time_1s == 1000){
 184   2          Time_1s = 0;
 185   2          Freq = TH0 << 8 | TL0;
 186   2          TH0 = 0;
 187   2          TL0 = 0;
 188   2        }
 189   1        if (Slow_Down % 100 == 0){
 190   2          Flash_Flag = !Flash_Flag;
 191   2        }
 192   1        Seg_Disp(Slow_Down % 8, Seg_Buf[Slow_Down % 8], Seg_Point[Slow_Down % 8]);
 193   1        Led_Disp(Slow_Down % 8, ucLed[Slow_Down % 8]);
 194   1        Relay(Relay_Flag);
 195   1      }
 196          
 197          void main(){
 198   1        InitSys();
 199   1        Timer1_Init();
 200   1        Set_Rtc(ucRtc);
 201   1        while(1){
 202   2          Key_Proc();
 203   2          Seg_Proc();
 204   2          Led_Proc();
 205   2          Relay_Proc();
 206   2        }
 207   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    808    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     62    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
